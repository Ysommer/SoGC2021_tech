Index: controlCenter/infrastructure/solGrid.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from solution.solution import *\nfrom typing import List, Set\nfrom infrastructure.robot import *\nfrom defines import *\nfrom utils import sum_tuples\n\nclass SolGrid:\n    def __init__(self, robots: List[Robot], obsticales: List[[int, int]], solution: Solution,\n                 dynamic: bool=False, grid_len: int = 5000, validate: bool= True):\n        self.robots = robots\n        self.solution = solution\n        self.dynamic = dynamic\n        self.grid_len = grid_len\n        self.validate = validate\n        self.grid = {} if dynamic else []\n        self.__robot_pos = [] #robot_id -> robot_pos\n        self.obs = set()\n        self.min_x = 0\n        self.max_x = 0\n        self.min_y = 0\n        self.max_y = 0\n        self.__set_robot_pos()\n        self.__set_obs(obsticales)\n        self.__set_grid()\n\n\n    def __set_grid(self):\n        self.append_empty_stage(0)\n        for i in range(len(self.__robot_pos)):\n            self.grid[0][self.__robot_pos[i]] = i\n\n        t = 1  # time\n\n        for step in self.solution.out[\"steps\"]:\n            if len(step) == 0:\n                continue\n            self.append_empty_stage(t)\n            for robot_id, direction in step.items():\n                old_pos = self.__robot_pos[int(robot_id)]\n                new_pos = sum_tuples(old_pos, directions_to_coords[direction])\n                if self.validate:\n                    assert self.validate_move(t, robot_id, direction), \"illegal move you stupid ass\"\n                self.grid[t][new_pos] = robot_id  # update robot's pos in time t\n                self.__robot_pos[robot_id] = new_pos\n            t += 1\n            if(self.dynamic and t > self.grid_len):\n                break\n    \"\"\"\n    def __set_dynamic_grid(self):\n        pass\n\n    def __set_full_grid(self) -> int:\n        assert self.grid == []\n        for t in range(len(self.solution.out[\"steps\"]) + 1):\n            self.grid.append({})\n        return len(self.grid)\n    \"\"\"\n\n    def __set_robot_pos(self):\n        for r in range(len(self.robots)):\n            self.__robot_pos.append(self.robots[r].pos)\n\n    def __set_obs(self, obs_list: List[int, int]):\n        for obsticale in obs_list:\n            pos = (obsticale[0], obsticale[1])\n            self.obs.add(pos)\n\n    def get_cell_content(self, time: int, pos: (int, int)): # retrns Null if cell is empty\n        if pos in self.obs:\n            return -1\n        return self.grid[t].get(pos)\n\n    def check_move(self, robot_id: int, new_pos: (int,int), time: int, direction: str) -> bool:\n        new_cell_content = self.get_cell_content(time, new_pos)\n        if new_cell_content is None or new_cell_content == robot_id or \\\n            (new_cell_content < -1 and solGrid_int_to_str(new_cell_content) == direction):\n            return True\n        return False\n\n    def validate_move(self, time, robot_id, direction):\n        old_pos = self.__robot_pos[robot_id]\n        new_pos = sum_tuples(old_pos,directions_to_coords[direction])\n        return new_pos not in self.obs and new_pos not in self.grid[t] and\\\n               (new_pos not in self.grid[t-1] or\\\n               (sum_tuples(new_pos, directions_to_coords[direction]) in self.grid[t] and\\\n               self.grid[t-1].get(new_pos) == self.grid[t].get(sum_tuples(new_pos, directions_to_coords[direction]))))\n\n    def append_empty_stage(self, time):\n        if self.dynamic:\n            assert time not in self.grid\n            self.grid[time] = {}\n        else:\n            self.grid[time].append({})\n\n    def validate_solution(self, targets:list):\n        for robot_id in range(len(self.__robot_pos)):\n            if targets[robot_id] != self.__robot_pos[robot_id]:\n                return false\n        return true
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/controlCenter/infrastructure/solGrid.py b/controlCenter/infrastructure/solGrid.py
--- a/controlCenter/infrastructure/solGrid.py	(revision 95ea1353fbc65040d7285350061db851023c4074)
+++ b/controlCenter/infrastructure/solGrid.py	(date 1608840649282)
@@ -96,4 +96,4 @@
         for robot_id in range(len(self.__robot_pos)):
             if targets[robot_id] != self.__robot_pos[robot_id]:
                 return false
-        return true
\ No newline at end of file
+        return true
Index: .idea/code.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<module type=\"PYTHON_MODULE\" version=\"4\">\n  <component name=\"NewModuleRootManager\">\n    <content url=\"file://$MODULE_DIR$\" />\n    <orderEntry type=\"jdk\" jdkName=\"Python 3.7\" jdkType=\"Python SDK\" />\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\n  </component>\n  <component name=\"TestRunnerService\">\n    <option name=\"PROJECT_TEST_RUNNER\" value=\"Unittests\" />\n  </component>\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/code.iml b/.idea/code.iml
--- a/.idea/code.iml	(revision 95ea1353fbc65040d7285350061db851023c4074)
+++ b/.idea/code.iml	(date 1608666822853)
@@ -2,7 +2,7 @@
 <module type="PYTHON_MODULE" version="4">
   <component name="NewModuleRootManager">
     <content url="file://$MODULE_DIR$" />
-    <orderEntry type="jdk" jdkName="Python 3.7" jdkType="Python SDK" />
+    <orderEntry type="jdk" jdkName="Python 3.7 (venv)" jdkType="Python SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
   <component name="TestRunnerService">
Index: .idea/inspectionProfiles/profiles_settings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><component name=\"InspectionProjectProfileManager\">\n  <settings>\n    <option name=\"USE_PROJECT_PROFILE\" value=\"false\" />\n    <version value=\"1.0\" />\n  </settings>\n</component>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/inspectionProfiles/profiles_settings.xml b/.idea/inspectionProfiles/profiles_settings.xml
--- a/.idea/inspectionProfiles/profiles_settings.xml	(revision 95ea1353fbc65040d7285350061db851023c4074)
+++ b/.idea/inspectionProfiles/profiles_settings.xml	(date 1608840550340)
@@ -1,5 +1,6 @@
 <component name="InspectionProjectProfileManager">
   <settings>
+    <option name="PROJECT_PROFILE" value="Default" />
     <option name="USE_PROJECT_PROFILE" value="false" />
     <version value="1.0" />
   </settings>
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.7\" project-jdk-type=\"Python SDK\" />\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 95ea1353fbc65040d7285350061db851023c4074)
+++ b/.idea/misc.xml	(date 1608666822857)
@@ -1,4 +1,4 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.7" project-jdk-type="Python SDK" />
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.7 (venv)" project-jdk-type="Python SDK" />
 </project>
\ No newline at end of file
